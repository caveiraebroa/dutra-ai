# Professor DUTRA - Script de Verifica√ß√£o de Configura√ß√£o
# Script para verificar se todas as configura√ß√µes est√£o funcionando

import os
import sys
from dotenv import load_dotenv

def check_env_file():
    """Verificar se o arquivo .env existe e est√° configurado"""
    print("üîç Verificando arquivo .env...")
    
    if not os.path.exists('.env'):
        print("‚ùå Arquivo .env n√£o encontrado!")
        print("üìù Crie o arquivo .env na raiz do projeto com as seguintes vari√°veis:")
        print()
        print("# Flask")
        print("SECRET_KEY=dutra-ia-secret-key-2024-super-segura-e-unica")
        print("FLASK_ENV=development")
        print("FLASK_DEBUG=True")
        print()
        print("# Elasticsearch")
        print("ELASTICSEARCH_HOST=professor-dutra-d99e7d.es.us-central1.gcp.elastic.cloud")
        print("ELASTICSEARCH_PORT=443")
        print("ELASTICSEARCH_USE_SSL=True")
        print("ELASTICSEARCH_API_KEY=TnQtY21KY0JEeVJWNUxUTmpNc206bVcxNmNLOHlrbmw5eXlZTkFibHBWQQ==")
        print("ELASTICSEARCH_PROJECT_ID=d99e7d0edd0a4cc69b38e5c75efb8421")
        print()
        print("# OpenAI")
        print("OPENAI_API_KEY=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")
        print("OPENAI_MODEL=gpt-3.5-turbo")
        print()
        print("# APIs de Not√≠cias")
        print("GNEWS_API_KEY=715eee72a8075265700c93c67cfa1750")
        print("NEWSAPI_API_KEY=d5a5fac8e6de4e5e81ac5b3042e59f7b")
        print()
        print("# Debug")
        print("DEBUG_MODE=True")
        print("LOG_LEVEL=DEBUG")
        print("SHOW_ERROR_DETAILS=True")
        return False
    
    print("‚úÖ Arquivo .env encontrado!")
    return True

def check_environment_variables():
    """Verificar se as vari√°veis de ambiente est√£o carregadas"""
    print("\nüîç Verificando vari√°veis de ambiente...")
    
    # Carregar vari√°veis de ambiente
    load_dotenv()
    
    # Lista de vari√°veis obrigat√≥rias
    required_vars = [
        'SECRET_KEY',
        'ELASTICSEARCH_HOST',
        'ELASTICSEARCH_API_KEY',
        'OPENAI_API_KEY',
        'GNEWS_API_KEY',
        'NEWSAPI_API_KEY'
    ]
    
    missing_vars = []
    
    for var in required_vars:
        value = os.environ.get(var)
        if value:
            # Mostrar apenas os primeiros caracteres por seguran√ßa
            masked_value = value[:10] + "..." if len(value) > 10 else value
            print(f"‚úÖ {var}: {masked_value}")
        else:
            print(f"‚ùå {var}: N√ÉO CONFIGURADA")
            missing_vars.append(var)
    
    if missing_vars:
        print(f"\n‚ö†Ô∏è  {len(missing_vars)} vari√°veis n√£o est√£o configuradas!")
        return False
    
    print("\n‚úÖ Todas as vari√°veis de ambiente est√£o configuradas!")
    return True

def check_flask_config():
    """Verificar se a configura√ß√£o do Flask est√° funcionando"""
    print("\nüîç Verificando configura√ß√£o do Flask...")
    
    try:
        from config import get_config
        
        config = get_config()
        
        print(f"‚úÖ Ambiente: {config.FLASK_ENV}")
        print(f"‚úÖ Debug: {config.DEBUG}")
        print(f"‚úÖ Secret Key: {'Configurada' if config.SECRET_KEY else 'N√ÉO CONFIGURADA'}")
        print(f"‚úÖ Elasticsearch Host: {config.ELASTICSEARCH_HOST}")
        print(f"‚úÖ OpenAI Model: {config.OPENAI_MODEL}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar configura√ß√£o: {e}")
        return False

def check_app_creation():
    """Verificar se a aplica√ß√£o Flask pode ser criada"""
    print("\nüîç Verificando cria√ß√£o da aplica√ß√£o Flask...")
    
    try:
        from app import create_app
        
        app = create_app('testing')
        
        print("‚úÖ Aplica√ß√£o Flask criada com sucesso!")
        print(f"‚úÖ Configura√ß√£o: {app.config['ENV']}")
        print(f"‚úÖ Debug: {app.config['DEBUG']}")
        print(f"‚úÖ Testing: {app.config['TESTING']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar aplica√ß√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal do script"""
    print("üöÄ Professor DUTRA - Verifica√ß√£o de Configura√ß√£o")
    print("=" * 50)
    
    # Verificar arquivo .env
    env_ok = check_env_file()
    
    if not env_ok:
        print("\n‚ùå Configura√ß√£o incompleta. Corrija os problemas acima.")
        return
    
    # Verificar vari√°veis de ambiente
    vars_ok = check_environment_variables()
    
    if not vars_ok:
        print("\n‚ùå Vari√°veis de ambiente incompletas. Corrija os problemas acima.")
        return
    
    # Verificar configura√ß√£o do Flask
    config_ok = check_flask_config()
    
    if not config_ok:
        print("\n‚ùå Configura√ß√£o do Flask com problemas. Corrija os problemas acima.")
        return
    
    # Verificar cria√ß√£o da aplica√ß√£o
    app_ok = check_app_creation()
    
    if not app_ok:
        print("\n‚ùå Cria√ß√£o da aplica√ß√£o com problemas. Corrija os problemas acima.")
        return
    
    print("\nüéâ TODAS AS VERIFICA√á√ïES PASSARAM!")
    print("‚úÖ O Professor DUTRA est√° pronto para a pr√≥xima fase!")
    print("\nüìã Pr√≥ximos passos:")
    print("1. Conex√£o com Elasticsearch")
    print("2. Cria√ß√£o de rotas b√°sicas")
    print("3. Configura√ß√£o da OpenAI")
    print("4. Sistema de autentica√ß√£o")

if __name__ == "__main__":
    main() 